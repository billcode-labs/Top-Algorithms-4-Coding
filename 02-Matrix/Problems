01 - Set Matrix Zeroes
======================
Given a m * n matrix, if an element is 0, 
set its entire row and column to 0.
Do it in place.

02 - Spiral Matrix II
=====================
Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.
For example, given n = 4,
[
[1,   2,  3, 4], 
[12, 13, 14, 5], 
[11, 16, 15, 6], 
[10,  9,  8, 7]
]

03 - Search a 2D Matrix II
==========================
Write an efficient algorithm that searches for a value in an m x n matrix.
This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

For example, consider the following matrix:
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

04 - Rotate Image
=================
You are given an n x n 2D matrix representing an image.
Rotate the image by 90 degrees (clockwise).
Relation:
"matrix[i][j] = matrix[n-1-j][i]"

Follow up: Could you do this in-place?

05 - Valid Sudoku
=================
Determine if a Sudoku is valid. The Sudoku board could be partially filled,
where empty cells are filled with the character '.'
+-----------------------+
| 5 3 . | . 7 . | . . . |
| 6 . . | 1 9 5 | . . . |
| . 9 8 | . . . | . 6 . |
+-----------------------+
| 8 . . | . 6 . | . . 3 |
| 4 . . | 8 . 3 | . . 1 |
| 7 . . | . 2 . | . . 6 |
+-----------------------+
| . 6 . | . . . | 2 8 . |
| . . . | 4 1 9 | . . 5 |
| . . . | . 8 . | . 7 9 |
+-----------------------+
